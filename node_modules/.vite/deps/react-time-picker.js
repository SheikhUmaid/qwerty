import {
  require_react_dom
} from "./chunk-AUFLGUIX.js";
import {
  require_jsx_runtime
} from "./chunk-XO4JX7VM.js";
import {
  require_react
} from "./chunk-PSQR3SVX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5WRI5ZAA.js";

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/react-time-picker/dist/TimePicker.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react_dom = __toESM(require_react_dom(), 1);

// node_modules/clsx/dist/clsx.mjs
function r(e) {
  var t, f, n = "";
  if ("string" == typeof e || "number" == typeof e) n += e;
  else if ("object" == typeof e) if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// node_modules/make-event-props/dist/index.js
var clipboardEvents = ["onCopy", "onCut", "onPaste"];
var compositionEvents = [
  "onCompositionEnd",
  "onCompositionStart",
  "onCompositionUpdate"
];
var focusEvents = ["onFocus", "onBlur"];
var formEvents = ["onInput", "onInvalid", "onReset", "onSubmit"];
var imageEvents = ["onLoad", "onError"];
var keyboardEvents = ["onKeyDown", "onKeyPress", "onKeyUp"];
var mediaEvents = [
  "onAbort",
  "onCanPlay",
  "onCanPlayThrough",
  "onDurationChange",
  "onEmptied",
  "onEncrypted",
  "onEnded",
  "onError",
  "onLoadedData",
  "onLoadedMetadata",
  "onLoadStart",
  "onPause",
  "onPlay",
  "onPlaying",
  "onProgress",
  "onRateChange",
  "onSeeked",
  "onSeeking",
  "onStalled",
  "onSuspend",
  "onTimeUpdate",
  "onVolumeChange",
  "onWaiting"
];
var mouseEvents = [
  "onClick",
  "onContextMenu",
  "onDoubleClick",
  "onMouseDown",
  "onMouseEnter",
  "onMouseLeave",
  "onMouseMove",
  "onMouseOut",
  "onMouseOver",
  "onMouseUp"
];
var dragEvents = [
  "onDrag",
  "onDragEnd",
  "onDragEnter",
  "onDragExit",
  "onDragLeave",
  "onDragOver",
  "onDragStart",
  "onDrop"
];
var selectionEvents = ["onSelect"];
var touchEvents = ["onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart"];
var pointerEvents = [
  "onPointerDown",
  "onPointerMove",
  "onPointerUp",
  "onPointerCancel",
  "onGotPointerCapture",
  "onLostPointerCapture",
  "onPointerEnter",
  "onPointerLeave",
  "onPointerOver",
  "onPointerOut"
];
var uiEvents = ["onScroll"];
var wheelEvents = ["onWheel"];
var animationEvents = [
  "onAnimationStart",
  "onAnimationEnd",
  "onAnimationIteration"
];
var transitionEvents = ["onTransitionEnd"];
var otherEvents = ["onToggle"];
var changeEvents = ["onChange"];
var allEvents = [
  ...clipboardEvents,
  ...compositionEvents,
  ...focusEvents,
  ...formEvents,
  ...imageEvents,
  ...keyboardEvents,
  ...mediaEvents,
  ...mouseEvents,
  ...dragEvents,
  ...selectionEvents,
  ...touchEvents,
  ...pointerEvents,
  ...uiEvents,
  ...wheelEvents,
  ...animationEvents,
  ...transitionEvents,
  ...changeEvents,
  ...otherEvents
];
function makeEventProps(props, getArgs) {
  const eventProps = {};
  for (const eventName of allEvents) {
    const eventHandler = props[eventName];
    if (!eventHandler) {
      continue;
    }
    if (getArgs) {
      eventProps[eventName] = ((event) => eventHandler(event, getArgs(eventName)));
    } else {
      eventProps[eventName] = eventHandler;
    }
  }
  return eventProps;
}

// node_modules/react-clock/dist/Clock.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);

// node_modules/@wojtekmaj/date-utils/dist/index.js
function makeGetEdgeOfNeighbor(getPeriod, getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborInternal(date, offset = defaultOffset) {
    const previousPeriod = getPeriod(date) + offset;
    return getEdgeOfPeriod(previousPeriod);
  };
}
function makeGetEnd(getBeginOfNextPeriod) {
  return function makeGetEndInternal(date) {
    return new Date(getBeginOfNextPeriod(date).getTime() - 1);
  };
}
function makeGetRange(getStart, getEnd) {
  return function makeGetRangeInternal(date) {
    return [getStart(date), getEnd(date)];
  };
}
function getYear(date) {
  if (date instanceof Date) {
    return date.getFullYear();
  }
  if (typeof date === "number") {
    return date;
  }
  const year = Number.parseInt(date, 10);
  if (typeof date === "string" && !Number.isNaN(year)) {
    return year;
  }
  throw new Error(`Failed to get year from date: ${date}.`);
}
function getMonth(date) {
  if (date instanceof Date) {
    return date.getMonth();
  }
  throw new Error(`Failed to get month from date: ${date}.`);
}
function getDate(date) {
  if (date instanceof Date) {
    return date.getDate();
  }
  throw new Error(`Failed to get year from date: ${date}.`);
}
function getHours(date) {
  if (date instanceof Date) {
    return date.getHours();
  }
  if (typeof date === "string") {
    const datePieces = date.split(":");
    if (datePieces.length >= 2) {
      const hoursString = datePieces[0];
      if (hoursString) {
        const hours = Number.parseInt(hoursString, 10);
        if (!Number.isNaN(hours)) {
          return hours;
        }
      }
    }
  }
  throw new Error(`Failed to get hours from date: ${date}.`);
}
function getMinutes(date) {
  if (date instanceof Date) {
    return date.getMinutes();
  }
  if (typeof date === "string") {
    const datePieces = date.split(":");
    if (datePieces.length >= 2) {
      const minutesString = datePieces[1] || "0";
      const minutes = Number.parseInt(minutesString, 10);
      if (!Number.isNaN(minutes)) {
        return minutes;
      }
    }
  }
  throw new Error(`Failed to get minutes from date: ${date}.`);
}
function getSeconds(date) {
  if (date instanceof Date) {
    return date.getSeconds();
  }
  if (typeof date === "string") {
    const datePieces = date.split(":");
    if (datePieces.length >= 2) {
      const secondsWithMillisecondsString = datePieces[2] || "0";
      const seconds = Number.parseInt(secondsWithMillisecondsString, 10);
      if (!Number.isNaN(seconds)) {
        return seconds;
      }
    }
  }
  throw new Error(`Failed to get seconds from date: ${date}.`);
}
function getMilliseconds(date) {
  if (date instanceof Date) {
    return date.getMilliseconds();
  }
  if (typeof date === "string") {
    const datePieces = date.split(":");
    if (datePieces.length >= 2) {
      const secondsWithMillisecondsString = datePieces[2] || "0";
      const millisecondsString = secondsWithMillisecondsString.split(".")[1] || "0";
      const milliseconds = Number.parseInt(millisecondsString, 10);
      if (!Number.isNaN(milliseconds)) {
        return milliseconds;
      }
    }
  }
  throw new Error(`Failed to get seconds from date: ${date}.`);
}
function getCenturyStart(date) {
  const year = getYear(date);
  const centuryStartYear = year + (-year + 1) % 100;
  const centuryStartDate = /* @__PURE__ */ new Date();
  centuryStartDate.setFullYear(centuryStartYear, 0, 1);
  centuryStartDate.setHours(0, 0, 0, 0);
  return centuryStartDate;
}
var getPreviousCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, -100);
var getNextCenturyStart = makeGetEdgeOfNeighbor(getYear, getCenturyStart, 100);
var getCenturyEnd = makeGetEnd(getNextCenturyStart);
var getPreviousCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, -100);
var getNextCenturyEnd = makeGetEdgeOfNeighbor(getYear, getCenturyEnd, 100);
var getCenturyRange = makeGetRange(getCenturyStart, getCenturyEnd);
function getDecadeStart(date) {
  const year = getYear(date);
  const decadeStartYear = year + (-year + 1) % 10;
  const decadeStartDate = /* @__PURE__ */ new Date();
  decadeStartDate.setFullYear(decadeStartYear, 0, 1);
  decadeStartDate.setHours(0, 0, 0, 0);
  return decadeStartDate;
}
var getPreviousDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, -10);
var getNextDecadeStart = makeGetEdgeOfNeighbor(getYear, getDecadeStart, 10);
var getDecadeEnd = makeGetEnd(getNextDecadeStart);
var getPreviousDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, -10);
var getNextDecadeEnd = makeGetEdgeOfNeighbor(getYear, getDecadeEnd, 10);
var getDecadeRange = makeGetRange(getDecadeStart, getDecadeEnd);
function getYearStart(date) {
  const year = getYear(date);
  const yearStartDate = /* @__PURE__ */ new Date();
  yearStartDate.setFullYear(year, 0, 1);
  yearStartDate.setHours(0, 0, 0, 0);
  return yearStartDate;
}
var getPreviousYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, -1);
var getNextYearStart = makeGetEdgeOfNeighbor(getYear, getYearStart, 1);
var getYearEnd = makeGetEnd(getNextYearStart);
var getPreviousYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, -1);
var getNextYearEnd = makeGetEdgeOfNeighbor(getYear, getYearEnd, 1);
var getYearRange = makeGetRange(getYearStart, getYearEnd);
function makeGetEdgeOfNeighborMonth(getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborMonthInternal(date, offset = defaultOffset) {
    const year = getYear(date);
    const month = getMonth(date) + offset;
    const previousPeriod = /* @__PURE__ */ new Date();
    previousPeriod.setFullYear(year, month, 1);
    previousPeriod.setHours(0, 0, 0, 0);
    return getEdgeOfPeriod(previousPeriod);
  };
}
function getMonthStart(date) {
  const year = getYear(date);
  const month = getMonth(date);
  const monthStartDate = /* @__PURE__ */ new Date();
  monthStartDate.setFullYear(year, month, 1);
  monthStartDate.setHours(0, 0, 0, 0);
  return monthStartDate;
}
var getPreviousMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, -1);
var getNextMonthStart = makeGetEdgeOfNeighborMonth(getMonthStart, 1);
var getMonthEnd = makeGetEnd(getNextMonthStart);
var getPreviousMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, -1);
var getNextMonthEnd = makeGetEdgeOfNeighborMonth(getMonthEnd, 1);
var getMonthRange = makeGetRange(getMonthStart, getMonthEnd);
function makeGetEdgeOfNeighborDay(getEdgeOfPeriod, defaultOffset) {
  return function makeGetEdgeOfNeighborDayInternal(date, offset = defaultOffset) {
    const year = getYear(date);
    const month = getMonth(date);
    const day = getDate(date) + offset;
    const previousPeriod = /* @__PURE__ */ new Date();
    previousPeriod.setFullYear(year, month, day);
    previousPeriod.setHours(0, 0, 0, 0);
    return getEdgeOfPeriod(previousPeriod);
  };
}
function getDayStart(date) {
  const year = getYear(date);
  const month = getMonth(date);
  const day = getDate(date);
  const dayStartDate = /* @__PURE__ */ new Date();
  dayStartDate.setFullYear(year, month, day);
  dayStartDate.setHours(0, 0, 0, 0);
  return dayStartDate;
}
var getPreviousDayStart = makeGetEdgeOfNeighborDay(getDayStart, -1);
var getNextDayStart = makeGetEdgeOfNeighborDay(getDayStart, 1);
var getDayEnd = makeGetEnd(getNextDayStart);
var getPreviousDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, -1);
var getNextDayEnd = makeGetEdgeOfNeighborDay(getDayEnd, 1);
var getDayRange = makeGetRange(getDayStart, getDayEnd);
function padStart(num, val = 2) {
  const numStr = `${num}`;
  if (numStr.length >= val) {
    return num;
  }
  return `0000${numStr}`.slice(-val);
}
function getHoursMinutes(date) {
  const hours = padStart(getHours(date));
  const minutes = padStart(getMinutes(date));
  return `${hours}:${minutes}`;
}
function getHoursMinutesSeconds(date) {
  const hours = padStart(getHours(date));
  const minutes = padStart(getMinutes(date));
  const seconds = padStart(getSeconds(date));
  return `${hours}:${minutes}:${seconds}`;
}

// node_modules/react-clock/dist/Hand.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
function Hand(_a) {
  var _b = _a.angle, angle = _b === void 0 ? 0 : _b, name = _a.name, _c = _a.length, length = _c === void 0 ? 100 : _c, _d = _a.oppositeLength, oppositeLength = _d === void 0 ? 10 : _d, _e = _a.width, width = _e === void 0 ? 1 : _e;
  return (0, import_jsx_runtime.jsx)("div", { className: "react-clock__hand react-clock__".concat(name, "-hand"), style: {
    transform: "rotate(".concat(angle, "deg)")
  }, children: (0, import_jsx_runtime.jsx)("div", { className: "react-clock__hand__body react-clock__".concat(name, "-hand__body"), style: {
    width: "".concat(width, "px"),
    top: "".concat(50 - length / 2, "%"),
    bottom: "".concat(50 - oppositeLength / 2, "%")
  } }) });
}

// node_modules/react-clock/dist/Mark.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react = __toESM(require_react(), 1);
var Mark = (0, import_react.memo)(function Mark2(_a) {
  var _b = _a.angle, angle = _b === void 0 ? 0 : _b, _c = _a.length, length = _c === void 0 ? 10 : _c, name = _a.name, _d = _a.width, width = _d === void 0 ? 1 : _d;
  return (0, import_jsx_runtime2.jsx)("div", { className: "react-clock__mark react-clock__".concat(name, "-mark"), style: {
    transform: "rotate(".concat(angle, "deg)")
  }, children: (0, import_jsx_runtime2.jsx)("div", { className: "react-clock__mark__body react-clock__".concat(name, "-mark__body"), style: {
    width: "".concat(width, "px"),
    top: 0,
    bottom: "".concat(100 - length / 2, "%")
  } }) });
});
var Mark_default = Mark;

// node_modules/react-clock/dist/MarkNumber.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react2 = __toESM(require_react(), 1);
var MarkNumber = (0, import_react2.memo)(function MarkNumber2(_a) {
  var _b = _a.angle, angle = _b === void 0 ? 0 : _b, _c = _a.length, length = _c === void 0 ? 10 : _c, name = _a.name, number = _a.number;
  return (0, import_jsx_runtime3.jsx)("div", { className: "react-clock__mark react-clock__".concat(name, "-mark"), style: {
    transform: "rotate(".concat(angle, "deg)")
  }, children: (0, import_jsx_runtime3.jsx)("div", { className: "react-clock__mark__number", style: {
    transform: "rotate(-".concat(angle, "deg)"),
    top: "".concat(length / 2, "%")
  }, children: number }) });
});
var MarkNumber_default = MarkNumber;

// node_modules/mimic-function/index.js
var copyProperty = (to, from, property, ignoreNonConfigurable) => {
  if (property === "length" || property === "prototype") {
    return;
  }
  if (property === "arguments" || property === "caller") {
    return;
  }
  const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
  const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);
  if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
    return;
  }
  Object.defineProperty(to, property, fromDescriptor);
};
var canCopyProperty = function(toDescriptor, fromDescriptor) {
  return toDescriptor === void 0 || toDescriptor.configurable || toDescriptor.writable === fromDescriptor.writable && toDescriptor.enumerable === fromDescriptor.enumerable && toDescriptor.configurable === fromDescriptor.configurable && (toDescriptor.writable || toDescriptor.value === fromDescriptor.value);
};
var changePrototype = (to, from) => {
  const fromPrototype = Object.getPrototypeOf(from);
  if (fromPrototype === Object.getPrototypeOf(to)) {
    return;
  }
  Object.setPrototypeOf(to, fromPrototype);
};
var wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/
${fromBody}`;
var toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, "toString");
var toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, "name");
var changeToString = (to, from, name) => {
  const withName = name === "" ? "" : `with ${name.trim()}() `;
  const newToString = wrappedToString.bind(null, withName, from.toString());
  Object.defineProperty(newToString, "name", toStringName);
  const { writable, enumerable, configurable } = toStringDescriptor;
  Object.defineProperty(to, "toString", { value: newToString, writable, enumerable, configurable });
};
function mimicFunction(to, from, { ignoreNonConfigurable = false } = {}) {
  const { name } = to;
  for (const property of Reflect.ownKeys(from)) {
    copyProperty(to, from, property, ignoreNonConfigurable);
  }
  changePrototype(to, from);
  changeToString(to, from, name);
  return to;
}

// node_modules/memoize/distribution/index.js
var cacheStore = /* @__PURE__ */ new WeakMap();
var cacheTimerStore = /* @__PURE__ */ new WeakMap();
function memoize(function_, { cacheKey, cache = /* @__PURE__ */ new Map(), maxAge } = {}) {
  if (maxAge === 0) {
    return function_;
  }
  if (typeof maxAge === "number") {
    const maxSetIntervalValue = 2147483647;
    if (maxAge > maxSetIntervalValue) {
      throw new TypeError(`The \`maxAge\` option cannot exceed ${maxSetIntervalValue}.`);
    }
    if (maxAge < 0) {
      throw new TypeError("The `maxAge` option should not be a negative number.");
    }
  }
  const memoized = function(...arguments_) {
    const key = cacheKey ? cacheKey(arguments_) : arguments_[0];
    const cacheItem = cache.get(key);
    if (cacheItem) {
      return cacheItem.data;
    }
    const result = function_.apply(this, arguments_);
    const computedMaxAge = typeof maxAge === "function" ? maxAge(...arguments_) : maxAge;
    cache.set(key, {
      data: result,
      maxAge: computedMaxAge ? Date.now() + computedMaxAge : Number.POSITIVE_INFINITY
    });
    if (computedMaxAge && computedMaxAge > 0 && computedMaxAge !== Number.POSITIVE_INFINITY) {
      const timer = setTimeout(() => {
        cache.delete(key);
      }, computedMaxAge);
      timer.unref?.();
      const timers = cacheTimerStore.get(function_) ?? /* @__PURE__ */ new Set();
      timers.add(timer);
      cacheTimerStore.set(function_, timers);
    }
    return result;
  };
  mimicFunction(memoized, function_, {
    ignoreNonConfigurable: true
  });
  cacheStore.set(memoized, cache);
  return memoized;
}

// node_modules/get-user-locale/dist/index.js
function isString(el) {
  return typeof el === "string";
}
function isUnique(el, index, arr) {
  return arr.indexOf(el) === index;
}
function isAllLowerCase(el) {
  return el.toLowerCase() === el;
}
function fixCommas(el) {
  return el.indexOf(",") === -1 ? el : el.split(",");
}
function normalizeLocale(locale) {
  if (!locale) {
    return locale;
  }
  if (locale === "C" || locale === "posix" || locale === "POSIX") {
    return "en-US";
  }
  if (locale.indexOf(".") !== -1) {
    var _a = locale.split(".")[0], actualLocale = _a === void 0 ? "" : _a;
    return normalizeLocale(actualLocale);
  }
  if (locale.indexOf("@") !== -1) {
    var _b = locale.split("@")[0], actualLocale = _b === void 0 ? "" : _b;
    return normalizeLocale(actualLocale);
  }
  if (locale.indexOf("-") === -1 || !isAllLowerCase(locale)) {
    return locale;
  }
  var _c = locale.split("-"), splitEl1 = _c[0], _d = _c[1], splitEl2 = _d === void 0 ? "" : _d;
  return "".concat(splitEl1, "-").concat(splitEl2.toUpperCase());
}
function getUserLocalesInternal(_a) {
  var _b = _a === void 0 ? {} : _a, _c = _b.useFallbackLocale, useFallbackLocale = _c === void 0 ? true : _c, _d = _b.fallbackLocale, fallbackLocale = _d === void 0 ? "en-US" : _d;
  var languageList = [];
  if (typeof navigator !== "undefined") {
    var rawLanguages = navigator.languages || [];
    var languages = [];
    for (var _i = 0, rawLanguages_1 = rawLanguages; _i < rawLanguages_1.length; _i++) {
      var rawLanguagesItem = rawLanguages_1[_i];
      languages = languages.concat(fixCommas(rawLanguagesItem));
    }
    var rawLanguage = navigator.language;
    var language = rawLanguage ? fixCommas(rawLanguage) : rawLanguage;
    languageList = languageList.concat(languages, language);
  }
  if (useFallbackLocale) {
    languageList.push(fallbackLocale);
  }
  return languageList.filter(isString).map(normalizeLocale).filter(isUnique);
}
var getUserLocales = memoize(getUserLocalesInternal, { cacheKey: JSON.stringify });
function getUserLocaleInternal(options) {
  return getUserLocales(options)[0] || null;
}
var getUserLocale = memoize(getUserLocaleInternal, { cacheKey: JSON.stringify });
var dist_default = getUserLocale;

// node_modules/react-clock/dist/shared/hourFormatter.js
function formatHour(locale, hour) {
  return hour.toLocaleString(locale || dist_default() || void 0);
}

// node_modules/react-clock/dist/shared/utils.js
function isValidNumber(num) {
  return num !== null && num !== false && !Number.isNaN(Number(num));
}
function safeMax() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  return Math.max.apply(Math, args.filter(isValidNumber));
}

// node_modules/react-clock/dist/Clock.js
function Clock(_a) {
  var className = _a.className, _b = _a.formatHour, formatHour2 = _b === void 0 ? formatHour : _b, _c = _a.hourHandLength, hourHandLength = _c === void 0 ? 50 : _c, hourHandOppositeLength = _a.hourHandOppositeLength, _d = _a.hourHandWidth, hourHandWidth = _d === void 0 ? 4 : _d, _e = _a.hourMarksLength, hourMarksLength = _e === void 0 ? 10 : _e, _f = _a.hourMarksWidth, hourMarksWidth = _f === void 0 ? 3 : _f, locale = _a.locale, _g = _a.minuteHandLength, minuteHandLength = _g === void 0 ? 70 : _g, minuteHandOppositeLength = _a.minuteHandOppositeLength, _h = _a.minuteHandWidth, minuteHandWidth = _h === void 0 ? 2 : _h, _j = _a.minuteMarksLength, minuteMarksLength = _j === void 0 ? 6 : _j, _k = _a.minuteMarksWidth, minuteMarksWidth = _k === void 0 ? 1 : _k, _l = _a.renderHourMarks, renderHourMarks = _l === void 0 ? true : _l, _m = _a.renderMinuteHand, renderMinuteHand = _m === void 0 ? true : _m, _o = _a.renderMinuteMarks, renderMinuteMarks = _o === void 0 ? true : _o, renderNumbers = _a.renderNumbers, _p = _a.renderSecondHand, renderSecondHand = _p === void 0 ? true : _p, _q = _a.secondHandLength, secondHandLength = _q === void 0 ? 90 : _q, secondHandOppositeLength = _a.secondHandOppositeLength, _r = _a.secondHandWidth, secondHandWidth = _r === void 0 ? 1 : _r, _s = _a.size, size = _s === void 0 ? 150 : _s, useMillisecondPrecision = _a.useMillisecondPrecision, value = _a.value;
  function renderMinuteMarksFn() {
    if (!renderMinuteMarks) {
      return null;
    }
    var minuteMarks = [];
    for (var i = 1; i <= 60; i += 1) {
      var isHourMark = renderHourMarks && !(i % 5);
      if (!isHourMark) {
        minuteMarks.push((0, import_jsx_runtime4.jsx)(Mark_default, { angle: i * 6, length: minuteMarksLength, name: "minute", width: minuteMarksWidth }, "minute_".concat(i)));
      }
    }
    return minuteMarks;
  }
  function renderHourMarksFn() {
    if (!renderHourMarks) {
      return null;
    }
    var hourMarks = [];
    for (var i = 1; i <= 12; i += 1) {
      hourMarks.push((0, import_jsx_runtime4.jsx)(Mark_default, { angle: i * 30, length: hourMarksLength, name: "hour", width: hourMarksWidth }, "hour_".concat(i)));
    }
    return hourMarks;
  }
  function renderNumbersFn() {
    if (!renderNumbers) {
      return null;
    }
    var numbers = [];
    for (var i = 1; i <= 12; i += 1) {
      numbers.push((0, import_jsx_runtime4.jsx)(MarkNumber_default, { angle: i * 30, length: safeMax(renderHourMarks && hourMarksLength, renderMinuteMarks && minuteMarksLength, 0), name: "number", number: formatHour2(locale, i) }, "number_".concat(i)));
    }
    return numbers;
  }
  function renderFace() {
    return (0, import_jsx_runtime4.jsxs)("div", { className: "react-clock__face", children: [renderMinuteMarksFn(), renderHourMarksFn(), renderNumbersFn()] });
  }
  function renderHourHandFn() {
    var angle = value ? getHours(value) * 30 + getMinutes(value) / 2 + getSeconds(value) / 120 + (useMillisecondPrecision ? getMilliseconds(value) / 12e4 : 0) : 0;
    return (0, import_jsx_runtime4.jsx)(Hand, { angle, length: hourHandLength, name: "hour", oppositeLength: hourHandOppositeLength, width: hourHandWidth });
  }
  function renderMinuteHandFn() {
    if (!renderMinuteHand) {
      return null;
    }
    var angle = value ? getHours(value) * 360 + getMinutes(value) * 6 + getSeconds(value) / 10 + (useMillisecondPrecision ? getMilliseconds(value) / 1e4 : 0) : 0;
    return (0, import_jsx_runtime4.jsx)(Hand, { angle, length: minuteHandLength, name: "minute", oppositeLength: minuteHandOppositeLength, width: minuteHandWidth });
  }
  function renderSecondHandFn() {
    if (!renderSecondHand) {
      return null;
    }
    var angle = value ? getMinutes(value) * 360 + getSeconds(value) * 6 + (useMillisecondPrecision ? getMilliseconds(value) * 6e-3 : 0) : 0;
    return (0, import_jsx_runtime4.jsx)(Hand, { angle, length: secondHandLength, name: "second", oppositeLength: secondHandOppositeLength, width: secondHandWidth });
  }
  return (0, import_jsx_runtime4.jsxs)("time", { className: clsx_default("react-clock", className), dateTime: value instanceof Date ? (
    // Returns a string in the format "HH:MM" or "HH:MM:SS"
    value.toLocaleTimeString("en", {
      hourCycle: "h23",
      hour: "2-digit",
      minute: renderMinuteHand ? "2-digit" : void 0,
      second: renderSecondHand ? "2-digit" : void 0
    })
  ) : value || void 0, style: {
    width: size,
    height: size
  }, children: [renderFace(), renderHourHandFn(), renderMinuteHandFn(), renderSecondHandFn()] });
}

// node_modules/react-clock/dist/index.js
var dist_default2 = Clock;

// node_modules/react-fit/dist/Fit.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);

// node_modules/detect-element-overflow/dist/index.js
function getRect(element) {
  return element.getBoundingClientRect();
}
function detectElementOverflow(element, container) {
  return {
    get collidedTop() {
      return getRect(element).top < getRect(container).top;
    },
    get collidedBottom() {
      return getRect(element).bottom > getRect(container).bottom;
    },
    get collidedLeft() {
      return getRect(element).left < getRect(container).left;
    },
    get collidedRight() {
      return getRect(element).right > getRect(container).right;
    },
    get overflowTop() {
      return getRect(container).top - getRect(element).top;
    },
    get overflowBottom() {
      return getRect(element).bottom - getRect(container).bottom;
    },
    get overflowLeft() {
      return getRect(container).left - getRect(element).left;
    },
    get overflowRight() {
      return getRect(element).right - getRect(container).right;
    }
  };
}

// node_modules/react-fit/dist/Fit.js
var import_warning = __toESM(require_warning(), 1);
var __rest = function(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var isBrowser = typeof window !== "undefined";
var isMutationObserverSupported = isBrowser && "MutationObserver" in window;
function capitalize(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
function findScrollContainer(element) {
  let parent = element.parentElement;
  while (parent) {
    const { overflow } = window.getComputedStyle(parent);
    if (overflow.split(" ").every((o) => o === "auto" || o === "scroll")) {
      return parent;
    }
    parent = parent.parentElement;
  }
  return document.documentElement;
}
function alignAxis({ axis, container, element, invertAxis, scrollContainer, secondary, spacing }) {
  const style = window.getComputedStyle(element);
  const parent = container.parentElement;
  if (!parent) {
    return;
  }
  const scrollContainerCollisions = detectElementOverflow(parent, scrollContainer);
  const documentCollisions = detectElementOverflow(parent, document.documentElement);
  const isX = axis === "x";
  const startProperty = isX ? "left" : "top";
  const endProperty = isX ? "right" : "bottom";
  const sizeProperty = isX ? "width" : "height";
  const overflowStartProperty = `overflow${capitalize(startProperty)}`;
  const overflowEndProperty = `overflow${capitalize(endProperty)}`;
  const scrollProperty = `scroll${capitalize(startProperty)}`;
  const uppercasedSizeProperty = capitalize(sizeProperty);
  const offsetSizeProperty = `offset${uppercasedSizeProperty}`;
  const clientSizeProperty = `client${uppercasedSizeProperty}`;
  const minSizeProperty = `min-${sizeProperty}`;
  const scrollbarWidth = scrollContainer[offsetSizeProperty] - scrollContainer[clientSizeProperty];
  const startSpacing = typeof spacing === "object" ? spacing[startProperty] : spacing;
  let availableStartSpace = -Math.max(scrollContainerCollisions[overflowStartProperty], documentCollisions[overflowStartProperty] + document.documentElement[scrollProperty]) - startSpacing;
  const endSpacing = typeof spacing === "object" ? spacing[endProperty] : spacing;
  let availableEndSpace = -Math.max(scrollContainerCollisions[overflowEndProperty], documentCollisions[overflowEndProperty] - document.documentElement[scrollProperty]) - endSpacing - scrollbarWidth;
  if (secondary) {
    availableStartSpace += parent[clientSizeProperty];
    availableEndSpace += parent[clientSizeProperty];
  }
  const offsetSize = element[offsetSizeProperty];
  function displayStart() {
    element.style[startProperty] = "auto";
    element.style[endProperty] = secondary ? "0" : "100%";
  }
  function displayEnd() {
    element.style[startProperty] = secondary ? "0" : "100%";
    element.style[endProperty] = "auto";
  }
  function displayIfFits(availableSpace, display) {
    const fits2 = offsetSize <= availableSpace;
    if (fits2) {
      display();
    }
    return fits2;
  }
  function displayStartIfFits() {
    return displayIfFits(availableStartSpace, displayStart);
  }
  function displayEndIfFits() {
    return displayIfFits(availableEndSpace, displayEnd);
  }
  function displayWhereverShrinkedFits() {
    const moreSpaceStart = availableStartSpace > availableEndSpace;
    const rawMinSize = style.getPropertyValue(minSizeProperty);
    const minSize = rawMinSize ? Number.parseInt(rawMinSize, 10) : null;
    function shrinkToSize(size) {
      (0, import_warning.default)(!minSize || size >= minSize, `<Fit />'s child will not fit anywhere with its current ${minSizeProperty} of ${minSize}px.`);
      const newSize = Math.max(size, minSize || 0);
      (0, import_warning.default)(false, `<Fit />'s child needed to have its ${sizeProperty} decreased to ${newSize}px.`);
      element.style[sizeProperty] = `${newSize}px`;
    }
    if (moreSpaceStart) {
      shrinkToSize(availableStartSpace);
      displayStart();
    } else {
      shrinkToSize(availableEndSpace);
      displayEnd();
    }
  }
  let fits;
  if (invertAxis) {
    fits = displayStartIfFits() || displayEndIfFits();
  } else {
    fits = displayEndIfFits() || displayStartIfFits();
  }
  if (!fits) {
    displayWhereverShrinkedFits();
  }
}
function alignMainAxis(args) {
  alignAxis(args);
}
function alignSecondaryAxis(args) {
  alignAxis(Object.assign(Object.assign({}, args), { axis: args.axis === "x" ? "y" : "x", secondary: true }));
}
function alignBothAxis(args) {
  const { invertAxis, invertSecondaryAxis } = args, commonArgs = __rest(args, ["invertAxis", "invertSecondaryAxis"]);
  alignMainAxis(Object.assign(Object.assign({}, commonArgs), { invertAxis }));
  alignSecondaryAxis(Object.assign(Object.assign({}, commonArgs), { invertAxis: invertSecondaryAxis }));
}
function Fit({ children, invertAxis, invertSecondaryAxis, mainAxis = "y", spacing = 8 }) {
  const container = (0, import_react3.useRef)(void 0);
  const element = (0, import_react3.useRef)(void 0);
  const elementWidth = (0, import_react3.useRef)(void 0);
  const elementHeight = (0, import_react3.useRef)(void 0);
  const scrollContainer = (0, import_react3.useRef)(void 0);
  const fit = (0, import_react3.useCallback)(() => {
    if (!scrollContainer.current || !container.current || !element.current) {
      return;
    }
    const currentElementWidth = element.current.clientWidth;
    const currentElementHeight = element.current.clientHeight;
    if (elementWidth.current === currentElementWidth && elementHeight.current === currentElementHeight) {
      return;
    }
    elementWidth.current = currentElementWidth;
    elementHeight.current = currentElementHeight;
    const parent = container.current.parentElement;
    if (!parent) {
      return;
    }
    const style = window.getComputedStyle(element.current);
    const { position } = style;
    if (position !== "absolute") {
      element.current.style.position = "absolute";
    }
    const parentStyle = window.getComputedStyle(parent);
    const { position: parentPosition } = parentStyle;
    if (parentPosition !== "relative" && parentPosition !== "absolute") {
      parent.style.position = "relative";
    }
    alignBothAxis({
      axis: mainAxis,
      container: container.current,
      element: element.current,
      invertAxis,
      invertSecondaryAxis,
      scrollContainer: scrollContainer.current,
      spacing
    });
  }, [invertAxis, invertSecondaryAxis, mainAxis, spacing]);
  const child = import_react3.Children.only(children);
  (0, import_react3.useEffect)(() => {
    fit();
    function onMutation() {
      fit();
    }
    if (isMutationObserverSupported && element.current) {
      const mutationObserver = new MutationObserver(onMutation);
      mutationObserver.observe(element.current, {
        attributes: true,
        attributeFilter: ["class", "style"]
      });
    }
  }, [fit]);
  function assignRefs(domElement) {
    if (!domElement || !(domElement instanceof HTMLElement)) {
      return;
    }
    element.current = domElement;
    scrollContainer.current = findScrollContainer(domElement);
  }
  return (0, import_jsx_runtime5.jsx)("span", { ref: (domContainer) => {
    if (!domContainer) {
      return;
    }
    container.current = domContainer;
    const domElement = domContainer === null || domContainer === void 0 ? void 0 : domContainer.firstElementChild;
    assignRefs(domElement);
  }, style: { display: "contents" }, children: child });
}

// node_modules/react-fit/dist/index.js
var dist_default3 = Fit;

// node_modules/react-time-picker/dist/TimeInput.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_react5 = __toESM(require_react(), 1);

// node_modules/react-time-picker/dist/Divider.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
function Divider({ children }) {
  return (0, import_jsx_runtime6.jsx)("span", { className: "react-time-picker__inputGroup__divider", children });
}

// node_modules/react-time-picker/dist/TimeInput/AmPm.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-time-picker/dist/shared/dates.js
function convert12to24(hour12, amPm) {
  let hour24 = Number(hour12);
  if (amPm === "am" && hour24 === 12) {
    hour24 = 0;
  } else if (amPm === "pm" && hour24 < 12) {
    hour24 += 12;
  }
  return hour24;
}
function convert24to12(hour24) {
  const hour12 = Number(hour24) % 12 || 12;
  return [hour12, Number(hour24) < 12 ? "am" : "pm"];
}

// node_modules/react-time-picker/dist/shared/dateFormatter.js
var formatterCache = /* @__PURE__ */ new Map();
function getFormatter(options) {
  return function formatter(locale, date) {
    const localeWithDefault = locale || dist_default();
    if (!formatterCache.has(localeWithDefault)) {
      formatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
    }
    const formatterCacheLocale = formatterCache.get(localeWithDefault);
    if (!formatterCacheLocale.has(options)) {
      formatterCacheLocale.set(options, new Intl.DateTimeFormat(localeWithDefault || void 0, options).format);
    }
    return formatterCacheLocale.get(options)(date);
  };
}
var numberFormatterCache = /* @__PURE__ */ new Map();
function getNumberFormatter(options) {
  return (locale, number) => {
    const localeWithDefault = locale || dist_default();
    if (!numberFormatterCache.has(localeWithDefault)) {
      numberFormatterCache.set(localeWithDefault, /* @__PURE__ */ new Map());
    }
    const numberFormatterCacheLocale = numberFormatterCache.get(localeWithDefault);
    if (!numberFormatterCacheLocale.has(options)) {
      numberFormatterCacheLocale.set(options, new Intl.NumberFormat(localeWithDefault || void 0, options).format);
    }
    return numberFormatterCacheLocale.get(options)(number);
  };
}

// node_modules/react-time-picker/dist/shared/utils.js
var nines = ["9", "٩"];
var ninesRegExp = new RegExp(`[${nines.join("")}]`);
var amPmFormatter = getFormatter({ hour: "numeric" });
function getAmPmLabels(locale) {
  const amString = amPmFormatter(locale, new Date(2017, 0, 1, 9));
  const pmString = amPmFormatter(locale, new Date(2017, 0, 1, 21));
  const [am1, am2] = amString.split(ninesRegExp);
  const [pm1, pm2] = pmString.split(ninesRegExp);
  if (pm2 !== void 0) {
    if (am1 !== pm1) {
      return [am1, pm1].map((el) => el.trim());
    }
    if (am2 !== pm2) {
      return [am2, pm2].map((el) => el.trim());
    }
  }
  return ["AM", "PM"];
}
function isValidNumber2(num) {
  return num !== null && num !== false && !Number.isNaN(Number(num));
}
function safeMin(...args) {
  return Math.min(...args.filter(isValidNumber2));
}
function safeMax2(...args) {
  return Math.max(...args.filter(isValidNumber2));
}

// node_modules/react-time-picker/dist/TimeInput/AmPm.js
function AmPm({ ariaLabel, autoFocus, className, disabled, inputRef, locale, maxTime, minTime, onChange, onKeyDown, required, value }) {
  const amDisabled = minTime ? convert24to12(getHours(minTime))[1] === "pm" : false;
  const pmDisabled = maxTime ? convert24to12(getHours(maxTime))[1] === "am" : false;
  const name = "amPm";
  const [amLabel, pmLabel] = getAmPmLabels(locale);
  return (0, import_jsx_runtime7.jsxs)("select", {
    "aria-label": ariaLabel,
    // biome-ignore lint/a11y/noAutofocus: This is up to developers' decision
    autoFocus,
    className: clsx_default(`${className}__input`, `${className}__${name}`),
    "data-input": "true",
    "data-select": "true",
    disabled,
    name,
    onChange,
    onKeyDown,
    // Assertion is needed for React 18 compatibility
    ref: inputRef,
    required,
    value: value !== null ? value : "",
    children: [!value && (0, import_jsx_runtime7.jsx)("option", { value: "", children: "--" }), (0, import_jsx_runtime7.jsx)("option", { disabled: amDisabled, value: "am", children: amLabel }), (0, import_jsx_runtime7.jsx)("option", { disabled: pmDisabled, value: "pm", children: pmLabel })]
  });
}

// node_modules/react-time-picker/dist/TimeInput/Hour12Input.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);

// node_modules/react-time-picker/dist/TimeInput/Input.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_react4 = __toESM(require_react(), 1);

// node_modules/update-input-width/dist/esm/index.js
var allowedVariants = ["normal", "small-caps"];
function getFontShorthand(element) {
  if (!element) {
    return "";
  }
  var style = window.getComputedStyle(element);
  if (style.font) {
    return style.font;
  }
  var isFontDefined = style.fontFamily !== "";
  if (!isFontDefined) {
    return "";
  }
  var fontVariant = allowedVariants.includes(style.fontVariant) ? style.fontVariant : "normal";
  return "".concat(style.fontStyle, " ").concat(fontVariant, " ").concat(style.fontWeight, " ").concat(style.fontSize, " / ").concat(style.lineHeight, " ").concat(style.fontFamily);
}
var cachedCanvas;
function measureText(text, font) {
  var canvas = cachedCanvas || (cachedCanvas = document.createElement("canvas"));
  var context = canvas.getContext("2d");
  if (!context) {
    return null;
  }
  context.font = font;
  var width = context.measureText(text).width;
  return Math.ceil(width);
}
function updateInputWidth(element) {
  if (typeof document === "undefined" || !element) {
    return null;
  }
  var font = getFontShorthand(element);
  var text = element.value || element.placeholder;
  var width = measureText(text, font);
  if (width === null) {
    return null;
  }
  element.style.width = "".concat(width, "px");
  return width;
}
var esm_default = updateInputWidth;

// node_modules/react-time-picker/dist/TimeInput/Input.js
var isBrowser2 = typeof window !== "undefined";
var useIsomorphicLayoutEffect = isBrowser2 ? import_react4.useLayoutEffect : import_react4.useEffect;
var isIEOrEdgeLegacy = isBrowser2 && /(MSIE|Trident\/|Edge\/)/.test(navigator.userAgent);
var isFirefox = isBrowser2 && /Firefox/.test(navigator.userAgent);
function onFocus(event) {
  const { target } = event;
  if (isIEOrEdgeLegacy) {
    requestAnimationFrame(() => target.select());
  } else {
    target.select();
  }
}
function updateInputWidthOnLoad(element) {
  if (document.readyState === "complete") {
    return;
  }
  function onLoad() {
    esm_default(element);
  }
  window.addEventListener("load", onLoad);
}
function updateInputWidthOnFontLoad(element) {
  if (!document.fonts) {
    return;
  }
  const font = getFontShorthand(element);
  if (!font) {
    return;
  }
  const isFontLoaded = document.fonts.check(font);
  if (isFontLoaded) {
    return;
  }
  function onLoadingDone() {
    esm_default(element);
  }
  document.fonts.addEventListener("loadingdone", onLoadingDone);
}
function getSelectionString(input) {
  if (input && "selectionStart" in input && input.selectionStart !== null && "selectionEnd" in input && input.selectionEnd !== null) {
    return input.value.slice(input.selectionStart, input.selectionEnd);
  }
  if ("getSelection" in window) {
    const selection = window.getSelection();
    return selection === null || selection === void 0 ? void 0 : selection.toString();
  }
  return null;
}
function makeOnKeyPress(maxLength) {
  if (maxLength === null) {
    return void 0;
  }
  return function onKeyPress(event) {
    if (isFirefox) {
      return;
    }
    const { key, target: input } = event;
    const { value } = input;
    const isNumberKey = key.length === 1 && /\d/.test(key);
    const selection = getSelectionString(input);
    if (!isNumberKey || !(selection || value.length < maxLength)) {
      event.preventDefault();
    }
  };
}
function Input({ ariaLabel, autoFocus, className, disabled, inputRef, max, min, name, nameForClass, onChange, onKeyDown, onKeyUp, placeholder = "--", required, showLeadingZeros, step, value }) {
  useIsomorphicLayoutEffect(() => {
    if (!inputRef || !inputRef.current) {
      return;
    }
    esm_default(inputRef.current);
    updateInputWidthOnLoad(inputRef.current);
    updateInputWidthOnFontLoad(inputRef.current);
  }, [inputRef, value]);
  const hasLeadingZero = showLeadingZeros && value && Number(value) < 10 && (value === "0" || !value.toString().startsWith("0"));
  const maxLength = max ? max.toString().length : null;
  return (0, import_jsx_runtime8.jsxs)(import_jsx_runtime8.Fragment, { children: [hasLeadingZero ? (0, import_jsx_runtime8.jsx)("span", { className: `${className}__leadingZero`, children: "0" }) : null, (0, import_jsx_runtime8.jsx)("input", {
    "aria-label": ariaLabel,
    autoComplete: "off",
    // biome-ignore lint/a11y/noAutofocus: This is up to developers' decision
    autoFocus,
    className: clsx_default(`${className}__input`, `${className}__${nameForClass || name}`, hasLeadingZero && `${className}__input--hasLeadingZero`),
    "data-input": "true",
    disabled,
    inputMode: "numeric",
    max,
    min,
    name,
    onChange,
    onFocus,
    onKeyDown,
    onKeyPress: makeOnKeyPress(maxLength),
    onKeyUp: (event) => {
      esm_default(event.target);
      if (onKeyUp) {
        onKeyUp(event);
      }
    },
    placeholder,
    // Assertion is needed for React 18 compatibility
    ref: inputRef,
    required,
    step,
    type: "number",
    value: value !== null ? value : ""
  })] });
}

// node_modules/react-time-picker/dist/TimeInput/Hour12Input.js
function Hour12Input({ amPm, maxTime, minTime, value, ...otherProps }) {
  const maxHour = safeMin(12, maxTime && (() => {
    const [maxHourResult, maxAmPm] = convert24to12(getHours(maxTime));
    if (maxAmPm !== amPm) {
      return null;
    }
    return maxHourResult;
  })());
  const minHour = safeMax2(1, minTime && (() => {
    const [minHourResult, minAmPm] = convert24to12(getHours(minTime));
    if (
      // pm is always after am, so we should ignore validation
      minAmPm !== amPm || // If minHour is 12 am/pm, user should be able to enter 12, 1, ..., 11.
      minHourResult === 12
    ) {
      return null;
    }
    return minHourResult;
  })());
  const value12 = value ? convert24to12(value)[0].toString() : "";
  return (0, import_jsx_runtime9.jsx)(Input, { max: maxHour, min: minHour, name: "hour12", nameForClass: "hour", value: value12, ...otherProps });
}

// node_modules/react-time-picker/dist/TimeInput/Hour24Input.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function Hour24Input({ maxTime, minTime, ...otherProps }) {
  const maxHour = safeMin(23, maxTime && getHours(maxTime));
  const minHour = safeMax2(0, minTime && getHours(minTime));
  return (0, import_jsx_runtime10.jsx)(Input, { max: maxHour, min: minHour, name: "hour24", nameForClass: "hour", ...otherProps });
}

// node_modules/react-time-picker/dist/TimeInput/MinuteInput.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function MinuteInput({ hour, maxTime, minTime, showLeadingZeros = true, ...otherProps }) {
  function isSameHour(date) {
    return hour === getHours(date).toString();
  }
  const maxMinute = safeMin(59, maxTime && isSameHour(maxTime) && getMinutes(maxTime));
  const minMinute = safeMax2(0, minTime && isSameHour(minTime) && getMinutes(minTime));
  return (0, import_jsx_runtime11.jsx)(Input, { max: maxMinute, min: minMinute, name: "minute", showLeadingZeros, ...otherProps });
}

// node_modules/react-time-picker/dist/TimeInput/NativeInput.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
function NativeInput({ ariaLabel, disabled, maxTime, minTime, name, onChange, required, value, valueType }) {
  const nativeValueParser = (() => {
    switch (valueType) {
      case "hour":
        return (receivedValue) => `${getHours(receivedValue)}:00`;
      case "minute":
        return getHoursMinutes;
      case "second":
        return getHoursMinutesSeconds;
      default:
        throw new Error("Invalid valueType");
    }
  })();
  const step = (() => {
    switch (valueType) {
      case "hour":
        return 3600;
      case "minute":
        return 60;
      case "second":
        return 1;
      default:
        throw new Error("Invalid valueType");
    }
  })();
  function stopPropagation(event) {
    event.stopPropagation();
  }
  return (0, import_jsx_runtime12.jsx)("input", { "aria-label": ariaLabel, disabled, hidden: true, max: maxTime ? nativeValueParser(maxTime) : void 0, min: minTime ? nativeValueParser(minTime) : void 0, name, onChange, onFocus: stopPropagation, required, step, style: {
    visibility: "hidden",
    position: "absolute",
    zIndex: "-999"
  }, type: "time", value: value ? nativeValueParser(value) : "" });
}

// node_modules/react-time-picker/dist/TimeInput/SecondInput.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
function SecondInput({ hour, maxTime, minTime, minute, showLeadingZeros = true, ...otherProps }) {
  function isSameMinute(date) {
    return hour === getHours(date).toString() && minute === getMinutes(date).toString();
  }
  const maxSecond = safeMin(59, maxTime && isSameMinute(maxTime) && getSeconds(maxTime));
  const minSecond = safeMax2(0, minTime && isSameMinute(minTime) && getSeconds(minTime));
  return (0, import_jsx_runtime13.jsx)(Input, { max: maxSecond, min: minSecond, name: "second", showLeadingZeros, ...otherProps });
}

// node_modules/react-time-picker/dist/TimeInput.js
var getFormatterOptionsCache = {};
var allViews = ["hour", "minute", "second"];
function isInternalInput(element) {
  return element.dataset.input === "true";
}
function findInput(element, property) {
  let nextElement = element;
  do {
    nextElement = nextElement[property];
  } while (nextElement && !isInternalInput(nextElement));
  return nextElement;
}
function focus(element) {
  if (element) {
    element.focus();
  }
}
function renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances) {
  const usedFunctions = [];
  const pattern = new RegExp(Object.keys(elementFunctions).map((el) => `${el}+`).join("|"), "g");
  const matches = placeholder.match(pattern);
  return placeholder.split(pattern).reduce((arr, element, index) => {
    const divider = element && // biome-ignore lint/suspicious/noArrayIndexKey: index is stable here
    (0, import_jsx_runtime14.jsx)(Divider, { children: element }, `separator_${index}`);
    arr.push(divider);
    const currentMatch = matches === null || matches === void 0 ? void 0 : matches[index];
    if (currentMatch) {
      const renderFunction = elementFunctions[currentMatch] || elementFunctions[Object.keys(elementFunctions).find((elementFunction) => currentMatch.match(elementFunction))];
      if (!renderFunction) {
        return arr;
      }
      if (!allowMultipleInstances && usedFunctions.includes(renderFunction)) {
        arr.push(currentMatch);
      } else {
        arr.push(renderFunction(currentMatch, index));
        usedFunctions.push(renderFunction);
      }
    }
    return arr;
  }, []);
}
var formatNumber = getNumberFormatter({ useGrouping: false });
function TimeInput({ amPmAriaLabel, autoFocus, className, disabled, format, hourAriaLabel, hourPlaceholder, isClockOpen: isClockOpenProps = null, locale, maxDetail = "minute", maxTime, minTime, minuteAriaLabel, minutePlaceholder, name = "time", nativeInputAriaLabel, onChange: onChangeProps, onInvalidChange, required, secondAriaLabel, secondPlaceholder, value: valueProps }) {
  const [amPm, setAmPm] = (0, import_react5.useState)(null);
  const [hour, setHour] = (0, import_react5.useState)(null);
  const [minute, setMinute] = (0, import_react5.useState)(null);
  const [second, setSecond] = (0, import_react5.useState)(null);
  const [value, setValue] = (0, import_react5.useState)(null);
  const amPmInput = (0, import_react5.useRef)(null);
  const hour12Input = (0, import_react5.useRef)(null);
  const hour24Input = (0, import_react5.useRef)(null);
  const minuteInput = (0, import_react5.useRef)(null);
  const secondInput = (0, import_react5.useRef)(null);
  const [isClockOpen, setIsClockOpen] = (0, import_react5.useState)(isClockOpenProps);
  const lastPressedKey = (0, import_react5.useRef)(void 0);
  (0, import_react5.useEffect)(() => {
    setIsClockOpen(isClockOpenProps);
  }, [isClockOpenProps]);
  (0, import_react5.useEffect)(() => {
    const nextValue = valueProps;
    if (nextValue) {
      setAmPm(convert24to12(getHours(nextValue))[1]);
      setHour(getHours(nextValue).toString());
      setMinute(getMinutes(nextValue).toString());
      setSecond(getSeconds(nextValue).toString());
      setValue(nextValue);
    } else {
      setAmPm(null);
      setHour(null);
      setMinute(null);
      setSecond(null);
      setValue(null);
    }
  }, [
    valueProps,
    minTime,
    maxTime,
    maxDetail,
    // Toggling clock visibility resets values
    isClockOpen
  ]);
  const valueType = maxDetail;
  const formatTime = (() => {
    const level = allViews.indexOf(maxDetail);
    const formatterOptions = getFormatterOptionsCache[level] || (() => {
      const options = { hour: "numeric" };
      if (level >= 1) {
        options.minute = "numeric";
      }
      if (level >= 2) {
        options.second = "numeric";
      }
      getFormatterOptionsCache[level] = options;
      return options;
    })();
    return getFormatter(formatterOptions);
  })();
  function getProcessedValue(value2) {
    const processFunction = (() => {
      switch (valueType) {
        case "hour":
        case "minute":
          return getHoursMinutes;
        case "second":
          return getHoursMinutesSeconds;
        default:
          throw new Error("Invalid valueType");
      }
    })();
    return processFunction(value2);
  }
  const placeholder = format || (() => {
    const hour24 = 21;
    const hour12 = 9;
    const minute2 = 13;
    const second2 = 14;
    const date = new Date(2017, 0, 1, hour24, minute2, second2);
    return formatTime(locale, date).replace(formatNumber(locale, hour12), "h").replace(formatNumber(locale, hour24), "H").replace(formatNumber(locale, minute2), "mm").replace(formatNumber(locale, second2), "ss").replace(new RegExp(getAmPmLabels(locale).join("|")), "a");
  })();
  const divider = (() => {
    const dividers = placeholder.match(/[^0-9a-z]/i);
    return dividers ? dividers[0] : null;
  })();
  function onClick(event) {
    if (event.target === event.currentTarget) {
      const firstInput = event.target.children[1];
      focus(firstInput);
    }
  }
  function onKeyDown(event) {
    lastPressedKey.current = event.key;
    switch (event.key) {
      case "ArrowLeft":
      case "ArrowRight":
      case divider: {
        event.preventDefault();
        const { target: input } = event;
        const property = event.key === "ArrowLeft" ? "previousElementSibling" : "nextElementSibling";
        const nextInput = findInput(input, property);
        focus(nextInput);
        break;
      }
      default:
    }
  }
  function onKeyUp(event) {
    const { key, target: input } = event;
    const isLastPressedKey = lastPressedKey.current === key;
    if (!isLastPressedKey) {
      return;
    }
    const isNumberKey = !Number.isNaN(Number(key));
    if (!isNumberKey) {
      return;
    }
    const max = input.getAttribute("max");
    if (!max) {
      return;
    }
    const { value: value2 } = input;
    if (Number(value2) * 10 > Number(max) || value2.length >= max.length) {
      const property = "nextElementSibling";
      const nextInput = findInput(input, property);
      focus(nextInput);
    }
  }
  function onChangeExternal() {
    if (!onChangeProps) {
      return;
    }
    function filterBoolean(value2) {
      return Boolean(value2);
    }
    const formElements = [
      amPmInput.current,
      hour12Input.current,
      hour24Input.current,
      minuteInput.current,
      secondInput.current
    ].filter(filterBoolean);
    const formElementsWithoutSelect = formElements.slice(1);
    const values = {};
    for (const formElement of formElements) {
      values[formElement.name] = formElement.type === "number" ? formElement.valueAsNumber : formElement.value;
    }
    const isEveryValueEmpty = formElementsWithoutSelect.every((formElement) => !formElement.value);
    if (isEveryValueEmpty) {
      onChangeProps(null, false);
      return;
    }
    const isEveryValueFilled = formElements.every((formElement) => formElement.value);
    const isEveryValueValid = formElements.every((formElement) => formElement.validity.valid);
    if (isEveryValueFilled && isEveryValueValid) {
      const hour2 = Number(values.hour24 || values.hour12 && values.amPm && convert12to24(values.hour12, values.amPm) || 0);
      const minute2 = Number(values.minute || 0);
      const second2 = Number(values.second || 0);
      const padStart2 = (num) => `0${num}`.slice(-2);
      const proposedValue = `${padStart2(hour2)}:${padStart2(minute2)}:${padStart2(second2)}`;
      const processedValue = getProcessedValue(proposedValue);
      onChangeProps(processedValue, false);
      return;
    }
    if (!onInvalidChange) {
      return;
    }
    onInvalidChange();
  }
  function onChange(event) {
    const { name: name2, value: value2 } = event.target;
    switch (name2) {
      case "amPm":
        setAmPm(value2);
        break;
      case "hour12":
        setHour(value2 ? convert12to24(value2, amPm || "am").toString() : "");
        break;
      case "hour24":
        setHour(value2);
        break;
      case "minute":
        setMinute(value2);
        break;
      case "second":
        setSecond(value2);
        break;
    }
    onChangeExternal();
  }
  function onChangeNative(event) {
    const { value: value2 } = event.target;
    if (!onChangeProps) {
      return;
    }
    const processedValue = value2 || null;
    onChangeProps(processedValue, false);
  }
  const commonInputProps = {
    className,
    disabled,
    maxTime,
    minTime,
    onChange,
    onKeyDown,
    onKeyUp,
    // This is only for showing validity when editing
    required: Boolean(required || isClockOpen)
  };
  function renderHour12(currentMatch, index) {
    if (currentMatch && currentMatch.length > 2) {
      throw new Error(`Unsupported token: ${currentMatch}`);
    }
    const showLeadingZeros = currentMatch ? currentMatch.length === 2 : false;
    return (0, import_jsx_runtime14.jsx)(Hour12Input, { ...commonInputProps, amPm, ariaLabel: hourAriaLabel, autoFocus: index === 0 && autoFocus, inputRef: hour12Input, placeholder: hourPlaceholder, showLeadingZeros, value: hour }, "hour12");
  }
  function renderHour24(currentMatch, index) {
    if (currentMatch && currentMatch.length > 2) {
      throw new Error(`Unsupported token: ${currentMatch}`);
    }
    const showLeadingZeros = currentMatch ? currentMatch.length === 2 : false;
    return (0, import_jsx_runtime14.jsx)(Hour24Input, { ...commonInputProps, ariaLabel: hourAriaLabel, autoFocus: index === 0 && autoFocus, inputRef: hour24Input, placeholder: hourPlaceholder, showLeadingZeros, value: hour }, "hour24");
  }
  function renderHour(currentMatch, index) {
    if (/h/.test(currentMatch)) {
      return renderHour12(currentMatch, index);
    }
    return renderHour24(currentMatch, index);
  }
  function renderMinute(currentMatch, index) {
    if (currentMatch && currentMatch.length > 2) {
      throw new Error(`Unsupported token: ${currentMatch}`);
    }
    const showLeadingZeros = currentMatch ? currentMatch.length === 2 : false;
    return (0, import_jsx_runtime14.jsx)(MinuteInput, { ...commonInputProps, ariaLabel: minuteAriaLabel, autoFocus: index === 0 && autoFocus, hour, inputRef: minuteInput, placeholder: minutePlaceholder, showLeadingZeros, value: minute }, "minute");
  }
  function renderSecond(currentMatch, index) {
    if (currentMatch && currentMatch.length > 2) {
      throw new Error(`Unsupported token: ${currentMatch}`);
    }
    const showLeadingZeros = currentMatch ? currentMatch.length === 2 : true;
    return (0, import_jsx_runtime14.jsx)(SecondInput, { ...commonInputProps, ariaLabel: secondAriaLabel, autoFocus: index === 0 && autoFocus, hour, inputRef: secondInput, minute, placeholder: secondPlaceholder, showLeadingZeros, value: second }, "second");
  }
  function renderAmPm(_currentMatch, index) {
    return (0, import_jsx_runtime14.jsx)(AmPm, { ...commonInputProps, ariaLabel: amPmAriaLabel, autoFocus: index === 0 && autoFocus, inputRef: amPmInput, locale, onChange, value: amPm }, "ampm");
  }
  function renderCustomInputsInternal() {
    const elementFunctions = {
      h: renderHour,
      H: renderHour,
      m: renderMinute,
      s: renderSecond,
      a: renderAmPm
    };
    const allowMultipleInstances = typeof format !== "undefined";
    return renderCustomInputs(placeholder, elementFunctions, allowMultipleInstances);
  }
  function renderNativeInput() {
    return (0, import_jsx_runtime14.jsx)(NativeInput, { ariaLabel: nativeInputAriaLabel, disabled, maxTime, minTime, name, onChange: onChangeNative, required, value, valueType }, "time");
  }
  return (
    // biome-ignore lint/a11y/useKeyWithClickEvents: This interaction is designed for mouse users only
    // biome-ignore lint/a11y/noStaticElementInteractions: This interaction is designed for mouse users only
    (0, import_jsx_runtime14.jsxs)("div", { className, onClick, children: [renderNativeInput(), renderCustomInputsInternal()] })
  );
}

// node_modules/react-time-picker/dist/TimePicker.js
var baseClassName = "react-time-picker";
var outsideActionEvents = ["mousedown", "focusin", "touchstart"];
var iconProps = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 19,
  height: 19,
  viewBox: "0 0 19 19",
  stroke: "black",
  strokeWidth: 2
};
var ClockIcon = (0, import_jsx_runtime15.jsxs)("svg", { ...iconProps, "aria-hidden": "true", className: `${baseClassName}__clock-button__icon ${baseClassName}__button__icon`, fill: "none", children: [(0, import_jsx_runtime15.jsx)("circle", { cx: "9.5", cy: "9.5", r: "7.5" }), (0, import_jsx_runtime15.jsx)("path", { d: "M9.5 4.5 v5 h4" })] });
var ClearIcon = (0, import_jsx_runtime15.jsxs)("svg", { ...iconProps, "aria-hidden": "true", className: `${baseClassName}__clear-button__icon ${baseClassName}__button__icon`, children: [(0, import_jsx_runtime15.jsx)("line", { x1: "4", x2: "15", y1: "4", y2: "15" }), (0, import_jsx_runtime15.jsx)("line", { x1: "15", x2: "4", y1: "4", y2: "15" })] });
function TimePicker(props) {
  const { amPmAriaLabel, autoFocus, className, clearAriaLabel, clearIcon = ClearIcon, clockAriaLabel, clockIcon = ClockIcon, closeClock: shouldCloseClockOnSelect = true, "data-testid": dataTestid, hourAriaLabel, hourPlaceholder, disableClock, disabled, format, id, isOpen: isOpenProps = null, locale, maxTime, maxDetail = "minute", minTime, minuteAriaLabel, minutePlaceholder, name = "time", nativeInputAriaLabel, onClockClose, onClockOpen, onChange: onChangeProps, onFocus: onFocusProps, onInvalidChange, openClockOnFocus = true, required, value, secondAriaLabel, secondPlaceholder, shouldCloseClock, shouldOpenClock, ...otherProps } = props;
  const [isOpen, setIsOpen] = (0, import_react6.useState)(isOpenProps);
  const wrapper = (0, import_react6.useRef)(null);
  const clockWrapper = (0, import_react6.useRef)(null);
  (0, import_react6.useEffect)(() => {
    setIsOpen(isOpenProps);
  }, [isOpenProps]);
  function openClock({ reason }) {
    if (shouldOpenClock) {
      if (!shouldOpenClock({ reason })) {
        return;
      }
    }
    setIsOpen(true);
    if (onClockOpen) {
      onClockOpen();
    }
  }
  const closeClock = (0, import_react6.useCallback)(({ reason }) => {
    if (shouldCloseClock) {
      if (!shouldCloseClock({ reason })) {
        return;
      }
    }
    setIsOpen(false);
    if (onClockClose) {
      onClockClose();
    }
  }, [onClockClose, shouldCloseClock]);
  function toggleClock() {
    if (isOpen) {
      closeClock({ reason: "buttonClick" });
    } else {
      openClock({ reason: "buttonClick" });
    }
  }
  function onChange(value2, shouldCloseClock2 = shouldCloseClockOnSelect) {
    if (shouldCloseClock2) {
      closeClock({ reason: "select" });
    }
    if (onChangeProps) {
      onChangeProps(value2);
    }
  }
  function onFocus2(event) {
    if (onFocusProps) {
      onFocusProps(event);
    }
    if (
      // Internet Explorer still fires onFocus on disabled elements
      disabled || isOpen || !openClockOnFocus || event.target.dataset.select === "true"
    ) {
      return;
    }
    openClock({ reason: "focus" });
  }
  const onKeyDown = (0, import_react6.useCallback)((event) => {
    if (event.key === "Escape") {
      closeClock({ reason: "escape" });
    }
  }, [closeClock]);
  function clear() {
    onChange(null);
  }
  function stopPropagation(event) {
    event.stopPropagation();
  }
  const onOutsideAction = (0, import_react6.useCallback)((event) => {
    const { current: wrapperEl } = wrapper;
    const { current: clockWrapperEl } = clockWrapper;
    const target = "composedPath" in event ? event.composedPath()[0] : event.target;
    if (target && wrapperEl && !wrapperEl.contains(target) && (!clockWrapperEl || !clockWrapperEl.contains(target))) {
      closeClock({ reason: "outsideAction" });
    }
  }, [closeClock]);
  const handleOutsideActionListeners = (0, import_react6.useCallback)((shouldListen = isOpen) => {
    for (const event of outsideActionEvents) {
      if (shouldListen) {
        document.addEventListener(event, onOutsideAction);
      } else {
        document.removeEventListener(event, onOutsideAction);
      }
    }
    if (shouldListen) {
      document.addEventListener("keydown", onKeyDown);
    } else {
      document.removeEventListener("keydown", onKeyDown);
    }
  }, [isOpen, onOutsideAction, onKeyDown]);
  (0, import_react6.useEffect)(() => {
    handleOutsideActionListeners();
    return () => {
      handleOutsideActionListeners(false);
    };
  }, [handleOutsideActionListeners]);
  function renderInputs() {
    const [valueFrom] = Array.isArray(value) ? value : [value];
    const ariaLabelProps = {
      amPmAriaLabel,
      hourAriaLabel,
      minuteAriaLabel,
      nativeInputAriaLabel,
      secondAriaLabel
    };
    const placeholderProps = {
      hourPlaceholder,
      minutePlaceholder,
      secondPlaceholder
    };
    return (0, import_jsx_runtime15.jsxs)("div", { className: `${baseClassName}__wrapper`, children: [(0, import_jsx_runtime15.jsx)(TimeInput, { ...ariaLabelProps, ...placeholderProps, autoFocus, className: `${baseClassName}__inputGroup`, disabled, format, isClockOpen: isOpen, locale, maxDetail, maxTime, minTime, name, onChange, onInvalidChange, required, value: valueFrom }), clearIcon !== null && (0, import_jsx_runtime15.jsx)("button", { "aria-label": clearAriaLabel, className: `${baseClassName}__clear-button ${baseClassName}__button`, disabled, onClick: clear, onFocus: stopPropagation, type: "button", children: typeof clearIcon === "function" ? (0, import_react6.createElement)(clearIcon) : clearIcon }), clockIcon !== null && !disableClock && (0, import_jsx_runtime15.jsx)("button", { "aria-expanded": isOpen || false, "aria-label": clockAriaLabel, className: `${baseClassName}__clock-button ${baseClassName}__button`, disabled, onClick: toggleClock, onFocus: stopPropagation, type: "button", children: typeof clockIcon === "function" ? (0, import_react6.createElement)(clockIcon) : clockIcon })] });
  }
  function renderClock() {
    if (isOpen === null || disableClock) {
      return null;
    }
    const { clockProps, portalContainer, value: value2 } = props;
    const className2 = `${baseClassName}__clock`;
    const classNames = clsx_default(className2, `${className2}--${isOpen ? "open" : "closed"}`);
    const [valueFrom] = Array.isArray(value2) ? value2 : [value2];
    const clock = (0, import_jsx_runtime15.jsx)(dist_default2, { locale, value: valueFrom, ...clockProps });
    return portalContainer ? (0, import_react_dom.createPortal)((0, import_jsx_runtime15.jsx)("div", { ref: clockWrapper, className: classNames, children: clock }), portalContainer) : (0, import_jsx_runtime15.jsx)(dist_default3, { children: (0, import_jsx_runtime15.jsx)("div", { ref: (ref) => {
      if (ref && !isOpen) {
        ref.removeAttribute("style");
      }
    }, className: classNames, children: clock }) });
  }
  const eventProps = (0, import_react6.useMemo)(
    () => makeEventProps(otherProps),
    // biome-ignore lint/correctness/useExhaustiveDependencies: FIXME
    [otherProps]
  );
  return (
    // biome-ignore lint/a11y/noStaticElementInteractions: False positive caused by non interactive wrapper listening for bubbling events
    (0, import_jsx_runtime15.jsxs)("div", { className: clsx_default(baseClassName, `${baseClassName}--${isOpen ? "open" : "closed"}`, `${baseClassName}--${disabled ? "disabled" : "enabled"}`, className), "data-testid": dataTestid, id, ...eventProps, onFocus: onFocus2, ref: wrapper, children: [renderInputs(), renderClock()] })
  );
}

// node_modules/react-time-picker/dist/index.js
var dist_default4 = TimePicker;
export {
  TimePicker,
  dist_default4 as default
};
//# sourceMappingURL=react-time-picker.js.map
